# This Dockerfile is meant to test several OCaml versions.
# It must be loaded from the everest repository root
# (NOT from the directory that contains the Dockerfile)

FROM ubuntu:22.04

# Install the dependencies of Project Everest
# libicu (for .NET, cf. https://aka.ms/dotnet-missing-libicu )
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update
RUN apt-get --yes install --no-install-recommends opam gcc binutils make m4 git time gnupg ca-certificates sudo cmake curl wget libicu70 libssl-dev python-is-python3 python3 rust-all

# Install NodeJS 16
RUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
RUN apt-get install -y --no-install-recommends nodejs

# Create a new user and give them sudo rights
RUN useradd -d /home/test test
RUN echo 'test ALL=NOPASSWD: ALL' >> /etc/sudoers
RUN mkdir /home/test
RUN chown test:test /home/test
USER test
ENV HOME /home/test
WORKDIR $HOME
SHELL ["/bin/bash", "--login", "-c"]

# CI dependencies: .NET Core
# Repository install may incur some (transient?) failures (see for instance https://github.com/dotnet/sdk/issues/27082 )
# So, we use manual install instead, from https://docs.microsoft.com/en-us/dotnet/core/install/linux-scripted-manual#manual-install
ENV DOTNET_ROOT $HOME/dotnet
RUN wget https://download.visualstudio.microsoft.com/download/pr/cd0d0a4d-2a6a-4d0d-b42e-dfd3b880e222/008a93f83aba6d1acf75ded3d2cfba24/dotnet-sdk-6.0.400-linux-x64.tar.gz && \
    mkdir -p $DOTNET_ROOT && \
    tar xf dotnet-sdk-6.0.400-linux-x64.tar.gz -C $DOTNET_ROOT && \
    echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' | tee --append $HOME/.profile $HOME/.bashrc $HOME/.bash_profile

# Install OCaml
ENV OPAMYES 1
ARG OCAML_VERSION=4.12.0
RUN opam init --compiler=$OCAML_VERSION --disable-sandboxing 
RUN opam env --set-switch | tee --append $HOME/.profile $HOME/.bashrc $HOME/.bash_profile

# Add Everest files and projects

# Alternative 1: use the current clone
ADD --chown=test . .
ENV EVEREST_DIR $HOME

# Alternative 2: use a fresh clone
# ENV EVEREST_BRANCH=master
# RUN git clone --branch $EVEREST_BRANCH https://github.com/project-everest/everest everest
# ENV EVEREST_DIR $HOME/everest

# Clone Everest subprojects
WORKDIR $EVEREST_DIR
RUN ./everest --yes reset

# Check that all Everest dependencies are correctly installed
ARG EVEREST_THREADS=24
RUN ./everest --yes -j $EVEREST_THREADS check

# Make Everest
RUN ./everest --yes -j $EVEREST_THREADS make

# Test Everest
RUN ./everest --yes -j $EVEREST_THREADS test
