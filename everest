#!/usr/bin/env bash

# Sorry, everyone
if (( ${BASH_VERSION%%.*} < 4 )); then
  echo "This script requires Bash >= 4. On OSX, try: brew install bash"
  exit 1
fi

# Any error is fatal.
set -e
set -o pipefail
# set -x # uncomment for debugging.
# set -u

# Known URLs and directories
OCAML_TARBALL=https://www.dropbox.com/s/p2g539wopa52mvj/ocaml-4.02.3-64bit.tar.bz2?dl=0
OPAM_TARBALL=https://www.dropbox.com/s/uhgpzgkplviy2mh/opam-4.02.3-64bit.tar.bz2?dl=0
FLEXDLL_NAME=flexdll-bin-0.35
FLEXDLL_URL=http://alain.frisch.fr/flexdll/$FLEXDLL_NAME.zip
Z3_VERSION=4.5.0
Z3_NAME=z3-$Z3_VERSION-x64-win
Z3_URL=https://github.com/Z3Prover/z3/releases/download/z3-$Z3_VERSION/$Z3_NAME.zip
VS_BIN=
if [[ -v VS140COMNTOOLS ]]; then
  VS_BIN="$VS140COMNTOOLS"/../../VC/bin
elif [[ -v VS120COMNTOOLS ]]; then
  VS_BIN="$VS120COMNTOOLS"/../../VC/bin
elif [[ -v VS110COMNTOOLS ]]; then
  VS_BIN="$VS110COMNTOOLS"/../../VC/bin
else
  VS_BIN=
fi
FS_DIR="C:/Program Files (x86)/Microsoft SDKs/F#/4.0/Framework/v4.0/"

# No-interaction when this script is used for CI purposes
INTERACTIVE=true
make_non_interactive () {
  INTERACTIVE=false
  export GIT_SSH_COMMAND="ssh -oBatchMode=yes"
  export GIT_TERMINAL_PROMPT=0
}

# Verbosity may still be enabled while logging
VERBOSE=false
make_verbose () {
  VERBOSE=true
}

# The whole script makes the assumption that we're in the everest directory;
# this is a conservative method that ensures we switch to this directory first
# thing. Basically, this supports:
# - calling "everest" (in the PATH)
# - calling "./everest" (same directory)
# - calling "/path/to/everest"
# - calling "../path/to/everest"
# This bails for corner cases, e.g. "source everest" or "wget http://.../everest | bash"
cd_to_everest () {
  echo -n "# Switching to the everest directory"
  if [[ ${0##*/} != "everest" ]]; then
    echo -e "\nThis script must be called via ./everest"
    exit 1
  fi
  if [[ $0 != ${0#*/} ]]; then
    # Relative or absolute path (contains /)
    cd $(dirname $0)
  else
    # Called via the path
    cd $(dirname $(which $0))
  fi
  echo " ... now in $(pwd)"
  echo
}
cd_to_everest

# "Modularity": include other files (requires us to be in the right directory)
source lib.sh
source repositories.sh
source hashes.sh


# ------------------------------------------------------------------------------
# A series of helpers
# ------------------------------------------------------------------------------

# Windows requires several tools that can be installed via Visual Studio, but
# these usually aren't in the PATH. Check in the usual locations, then offer to
# customize ~/.bashrc
#   $1: name of command to check for
#   $2: candidate directory where it may reside
windows_check_or_modify_bashrc () {
  if ! command -v $1 >/dev/null 2>&1; then
    red "ERROR: $1 not found in PATH"
    if [ -f "$2"/$1 ]; then
      magenta "$1 found in $2; add to PATH via ~/.bashrc? [Yn]"
      if prompt_yes true false; then
        path=$(cygpath -m -d "$2")
        path=$(cygpath "$path")
        str="
          # This line automatically added by $0
          export PATH=\"$path\":\$PATH"
        eval "$str"
        echo "$str" >> ~/.bashrc
        magenta "Remember to run source ~/.bashrc in your terminal afterwards!"
      fi
    else
      red "$1 not found in $2, bailing"
      echo Hint: it looks like some VS2015 components are missing. We need \
        VS2015, including the C++ components. You can run the VS2015 installer \
        and choose a custom setup, to ensure you have both F# and the C++ \
        components.
      exit 1
    fi
  fi

  echo "... found $1"
}

write_z3_bashrc () {
  str="
    # This line automatically added by $0
    export PATH=$(pwd)/$Z3_NAME/bin:\$PATH"
  eval "$str"
  echo "$str" >> ~/.bashrc
  magenta "Remember to run source ~/.bashrc in your terminal afterwards!"
}

write_flexdll_bashrc () {
  str="
    # These lines automatically added by $0
    export PATH=$(pwd)/flexdll:\$PATH"
  eval "$str"
  echo "$str" >> ~/.bashrc
  magenta "Remember to run source ~/.bashrc in your terminal afterwards!"
}

write_ocaml_bashrc () {
  str="
    # These lines automatically added by $0
    export PATH=/cygdrive/c/ocamlmgw64/bin/:\$PATH
    export PATH=\$HOME/.opam/system/bin:\$PATH
    export PATH=\$HOME/.opam/system/lib/stublibs:\$PATH
    export PATH=/cygdrive/c/Program\ Files\ \(x86\)/flexdll/:\$PATH
    export OCAMLFIND_CONF=$(cygpath -m ~/.opam/system/lib/findlib.conf)
    export MENHIRLIB=$(cygpath -m ~/.opam/system/share/menhir)
    export OCAML_TOPLEVEL_PATH=$(cygpath -m ~/.opam/system/lib/toplevel/)"
  eval "$str"
  echo "$str" >> ~/.bashrc
  magenta "Remember to run source ~/.bashrc in your terminal afterwards!"
}

write_cygwin_bashrc () {
  str="
    # These lines automatically added by $0
    export PATH=/usr/x86_64-w64-mingw32/sys-root/mingw/bin:\$PATH
    export CYGWIN='winsymlinks:native'"
  eval "$str"
  echo "$str" >> ~/.bashrc
  magenta "Remember to run source ~/.bashrc in your terminal afterwards!"
}

cygsetup="setup-x86_64.exe"
cygsetup_args="--no-desktop --no-shortcuts --no-startmenu --wait --quiet-mode"
# Find Cygwin's setup utility, or download it from the internet.
# Success: writes the path to Cygwin's setup in $cygsetup
# Failure: aborts.
find_cygsetup () {
  found=false
  for s in "$USERPROFILE/Desktop/setup-x86_64.exe" "$USERPROFILE/Downloads/setup-x86_64.exe" "./setup-x86_64.exe"; do
    if [ -x "$s" ]; then
      echo "Found $cygsetup"
      found=true
      cygsetup="$s"
    fi
  done
  if ! $found; then
    magenta "Cygwin setup not found, downloading it"
    if ! command -v wget >/dev/null 2>&1; then
      red "ERROR: please either place cygwin's setup-x86_64.exe in your Downloads or Desktop folder, or install wget via cygwin's setup"
    fi
    wget "https://cygwin.com/setup-x86_64.exe"
    chmod a+x setup-x86_64.exe
    cygsetup=./setup-x86_64.exe
  fi
}

install_all_opam_packages () {
  packages=$(cat opam-packages | cut -d ' ' -f 2 | tr '\n' ' ')
  opam update
  if is_windows; then
    opam install depext-cygwinports
  fi
  opam depext $packages
  opam install $packages
}


# ------------------------------------------------------------------------------
# The functions that implement the main actions
# ------------------------------------------------------------------------------

do_check ()
{
  blue "Checking environment"

  # Basic utilities
  success_or "which" "please execute this script in a Unix environment"
  if is_osx; then
    success_or "greadlink" "please run \"brew install coreutils\""
  fi

  # Slightly suboptimal, since we may end up running Cygwin's setup twice.
  if ! command -v git >/dev/null 2>&1; then
    if is_windows; then
      magenta "Git not found. Install Cygwin's git? [Yn]"
      find_cygsetup
      prompt_yes "$cygsetup $cygsetup_args --packages=git"
    else
      red "ERROR: git not found; install it via your favorite package manager"
    fi
  fi

  # Windows pre-requisites
  if is_windows; then
    # A list of known causes for failure
    if where.exe bash.exe | grep -v cygwin >/dev/null 2>&1; then
      red "ERROR: bash.exe has been found in a non-standard location!"
      echo "Please remove Bash for Windows and others (GNU for Windows, MSYS2, etc.)"
      red "Are you sure you want to continue? [Yn]"
      prompt_yes true "exit 1"
    else
      echo "... no suspicious bash"
    fi

    if [[ $(uname -m) != "x86_64" ]]; then
      red "ERROR: not a 64-bit Cygwin"
      echo "We've experienced tons of issues with 32-bit Cygwin. Time to upgrade."
      exit 1
    fi
    echo "... 64-bit cygwin"

    if cygwin_has "ocaml" || cygwin_has "flexdll"; then
      red "ERROR: please remove the cygwin ocaml and/or flexdll packages"
      exit 1
    fi
    echo "... no suspicious cygwin packages"

    # The list of required cygwin packages
    for p in $(cat cygwin-packages); do
      if ! cygwin_has $p; then
        find_cygsetup
        echo "Cygwin package $p is missing"
        if_yes "$cygsetup $cygsetup_args --packages=$(cat cygwin-packages | tr '\n' ,)"
      fi
    done
    echo "... all $(cat cygwin-packages | wc -l) cygwin packages seem to be installed"

    if ! command -v libsqlite3-0.dll >/dev/null 2>&1; then
      red "Warning: x86_64-mingw32 DLLs not in PATH"
      magenta "Automatically customize ~/.bashrc with the x86_64-mingw32 path + native windows symlinks?"
      prompt_yes write_cygwin_bashrc true
    else
      echo "... proper mingw directory seems to be in PATH"
    fi
  fi # if is_windows

  # Note: ssh returns the exit code of the remote command (1 in this case),
  # hence the || true -- the success of this step is determined by the presence
  # of "authenticated".
  if ! (ssh -oStrictHostKeyChecking=no git@github.com 2>&1 || true) | grep authenticated >/dev/null; then
    magenta "Warning: git client not configured with the proper ssh credentials"
    echo "Hint: check which git you're running, and make sure you have the same SSH key in ~/.ssh and github.com"
  else
    echo "... github.com access ok"
  fi

  # OCaml detection
  if ! command -v >/dev/null 2>&1 ocaml; then
    # Offer to install and sed-setup a crappy snapshot
    if is_windows; then
      magenta "No OCaml detected!"
      cat <<MSG
This script can download and install a binary snapshot of a working OCaml
system.

- If you intend to do some development work (e.g. try a 32-bit toolchain)
  then you DO NOT want this. Instead; you want to abort this script and install
  OCaml & OPAM from https://fdopen.github.io/opam-repository-mingw/

- If you're ok with a system that can be setup automatically but that may or may
  not work in the future, then you want the binary snapshot.

Proceed with the binary snapshot?
MSG
      prompt_yes true "exit 1"
      if [ -e ~/.opam ]; then
        red "Warning: stale ~/.opam; continue? [Yn]"
        prompt_yes true "exit 1"
      fi
      if [ -e /cygdrive/c/ocamlmgw64 ]; then
        red "Warning: stale /cygdrive/c/ocamlmgw64; continue? [Yn]"
        prompt_yes true "exit 1"
      fi
      (cd c:/ && wget -O - $OCAML_TARBALL | tar xjvf -)
      (cd ~ && wget -O - $OPAM_TARBALL | tar xjvf -)
      (cd ~/.opam/system/lib && find . -iname '*.cmxs' -exec chmod a+x {} \;)
      (cd ~/.opam/system/lib &&
        echo -e "destdir=\"$(cygpath -m $(pwd))\"\npath=\"$(cygpath -m $(pwd))\"" > findlib.conf.new &&
        tail -n +3 findlib.conf >> findlib.conf.new &&
        mv findlib.conf.new findlib.conf)
      magenta "Automatically customize ~/.bashrc with the the magic variables you need? [Yn]"
      prompt_yes write_ocaml_bashrc true
    else
      red "ERROR: no ocaml found in PATH"
      if is_osx; then
        echo "Hint: brew install ocaml opam"
      else
        echo "Please use your distribution's package management system to install ocaml and opam"
        echo "Note: on older Ubuntus, see https://launchpad.net/~avsm/+archive/ubuntu/ppa"
      fi
      exit 1
    fi

  else
    # OCaml; if this exits, set -e means this is a hard error
    ocaml -noinit -noprompt -stdin <<OCAML
      if Sys.ocaml_version < "4.02.2" then begin
        print_endline "ERROR: Everest needs OCaml >= 4.02.3";
        exit 1
      end
OCAML
    echo "... ocaml minimum version requirements met"
  fi

  # Flexlink detection (Windows-specific)
  if is_windows && ! command -v flexlink >/dev/null 2>&1; then
    magenta "No flexdll found; download? [Yn]"
    prompt_yes true "exit 1"
    wget $FLEXDLL_URL
    mkdir -p flexdll && cd flexdll && unzip ../$FLEXDLL_NAME.zip && cd ..
    magenta "Automatically customize ~/.bashrc with the the magic variables you need? [Yn]"
    prompt_yes write_flexdll_bashrc true
  elif is_windows; then
    echo "... flexdll ok"
  fi

  # OCamlfind & extra packages. Required OPAM packages are stored in
  # [opam-packages], where each line is of the form:
  #   <ocamlfind-package-name> <SPACE> <opam-package-name>
  success_or "opam"
  if [ ! -d ~/.opam ]; then
    if_yes "opam init"
    eval $(opam config env)
  fi

  if ! command -v ocamlfind >/dev/null 2>&1; then
    magenta "ocamlfind not found!"
    if_yes "opam install ocamlfind"
  fi

  missing=false
  while read line; do
    ocamlfind_package=$(echo $line | cut -d " " -f 1)
    opam_package=$(echo $line | cut -d " " -f 2)
    if ! ocamlfind query $ocamlfind_package >/dev/null 2>&1; then
      red "ERROR: ocamlfind package $ocamlfind_package is not installed"
      missing=true
      break
    fi
  done < opam-packages
  if $missing; then
    if_yes "install_all_opam_packages"
  fi
  echo "... all $(cat opam-packages | wc -l) ocamlfind packages found"

  # F# and MS compilers (note: nothing for OSX/Linux right now)
  if is_windows; then
    windows_check_or_modify_bashrc "fsc.exe" "$FS_DIR"
    windows_check_or_modify_bashrc "nmake.exe" "$VS_BIN"
    windows_check_or_modify_bashrc "ml64.exe" "$VS_BIN/amd64"
  else
    success_or "fsharpc" "brew install mono or use your favorite package manager"
  fi
  echo "... fsc found in PATH"

  # The right z3 version
  if ! which z3 >/dev/null 2>&1 || [[ $(z3 --version | tr -d '\r\n') != "Z3 version $Z3_VERSION - 64 bit" ]]; then
    red "ERROR: the right version of z3 doesn't seem to be installed"
    if is_windows; then
      magenta "Download it from the internet? [Yn]"
      prompt_yes true "exit 1"
      wget $Z3_URL
      unzip $Z3_NAME
      find $Z3_NAME -iname '*.dll' -or -iname '*.exe' | xargs chmod a+x
      magenta "Automatically customize ~/.bashrc with the z3 path? [Yn]"
      prompt_yes write_z3_bashrc true
    else
      echo "Hint: brew install z3 (OSX), apt-get install z3 (other)"
      echo "Hint: most recent versions available at https://github.com/Z3Prover/z3/releases/tag/z3-$Z3_VERSION"
      exit 1
    fi
  fi
  echo "... correct z3 version detected"

  echo
  magenta "Remember to run source ~/.bashrc if it was modified!"
  magenta "Note: you *may* want to add $(pwd)/FStar/bin and $(pwd)/kremlin to your PATH"
  magenta "Note: you *may* want to export FSTAR_HOME=$(pwd)/FStar"
}

try_git_clone () {
  if ! git clone $1 $2; then
    magenta "Proceed with https? [Yn]"
    prompt_yes true "exit 1"
    url=$1
    url=${url/:/\/}
    url=https://${url#*@}
    git clone $url $2
  fi
}

self_update () {
  old_revision=$(git rev-parse HEAD)
  git pull
  if [[ $(git rev-parse HEAD) != $old_revision ]]; then
    blue "Self-updating to new everest revision $(git rev-parse HEAD | cut -c 1-8)"
    $0 "$@"
    exit 0
  else
    echo "No new everest revision available"
  fi
}

do_pull () {
  self_update
  do_reset
}

do_reset ()
{
  warned=false
  for r in ${!repositories[@]}; do
    echo
    blue "Pulling $r"
    # Some sanity checks, and clone the repositories that aren't there already
    if [ ! -d $r ]; then
      if [ -e $r ]; then
        red "$r exists but is not a directory, aborting"
        exit 1
      fi
      if ! $warned; then
        echo Note: you\'re welcome to create symbolic links if you already have \
          cloned the repository elsewhere
        warned=true
      fi
      # This is for Spartan. We have yet to get anyone to clone that beyond
      # Building 99. TODO remove once Spartan can be cloned by mere mortals
      if ! if_yes "try_git_clone ${repositories[$r]} $r"; then
        magenta "Warning: could not clone $r"
        continue
      fi
    fi

    # Note: the snapshot command guarantees that the commit was pushed to a
    # branch of the form origin/foo. So, we checkout foo, because there's a good
    # chance it tracks origin/foo which contains the commit we want. If it's not
    # the case it's a crazy setup and the user is on their own.
    cd $r
    git fetch
    hash=${hashes[$r]}
    branch=${branches[$r]}
    if [[ $(git symbolic-ref HEAD) != $branch ]]; then
      git checkout $branch
    fi
    upstream=$(git rev-parse --abbrev-ref --symbolic-full-name @{u})
    if ! git branch -r --contains $hash | egrep "^ +$upstream$" >/dev/null 2>&1; then
      red "ERROR: in repository $r, the hash $hash claims to belong to branch \
        $branch, but $branch pulls from $upstream which does not contain $hash"
      exit 1
    fi
    git reset --hard $hash
    cd ..
  done
}

build_spartan () {
  VARS=$(cygpath -d "$VS_BIN\\..\\vcvarsall.bat")
  DIR=$(cygpath -d "$(pwd)"/Spartan)
  CMD=$(cygpath -u "$COMSPEC")
  $CMD /C "cd $DIR && $VARS amd64 && nmake && nmake exes"

  # Import fresh crypto from Spartan into F*
  cd FStar
  make -C examples/low-level/spartan_aes import
  if ! git diff --exit-code; then
    magenta "New assemblies from Spartan, diff is above"
  fi
  cd ..
}

possibly_log () {
  echo "Running $1"
  cmd=$1
  log_file=$2
  if $INTERACTIVE; then
    $cmd | count "log/$log_file"
  else
    $cmd
  fi
}

do_make ()
{
  failed=""

  if is_windows; then
    export FSTAR_HOME=$(cygpath -m $(pwd)/FStar)
    export SPARTAN_HOME=$(cygpath -m $(pwd)/Spartan)
  else
    export FSTAR_HOME=$(pwd)/FStar
    export SPARTAN_HOME=$(pwd)/Spartan
  fi
  magenta "exported FSTAR_HOME=$FSTAR_HOME"
  magenta "exported SPARTAN_HOME=$SPARTAN_HOME"
  export PATH=$(pwd)/FStar/bin:$(pwd)/kremlin:$PATH

  mkdir -p log
  blue "Rebuilding F*"
  if ! possibly_log "make -C FStar/src/ocaml-output -j 15" "fstar"; then
    failed="$failed  FStar\n"
  fi

  echo
  blue "Rebuilding KreMLin"
  if ! possibly_log "make -C kremlin -j 15" "kremlin"; then
    failed="$failed  KreMLin\n"
  fi

  echo
  # TODO Get rid of this when Spartan goes public
  if [ -d Spartan ]; then
    blue "Rebuilding Spartan"
    if ! possibly_log "build_spartan" "spartan"; then
      failed="$failed  Spartan\n"
    fi
  else
    magenta "Warning: no Spartan..."
  fi

  echo
  blue "Rebuilding F* / CoreCrypto"
  if ! possibly_log "make -C FStar/ucontrib/CoreCrypto/ml -j 15" "fstar-corecrypto"; then
    failed="$failed  CoreCrypto\n"
  fi

  echo
  blue "Building mixed C/ASM Crypto"
  if ! possibly_log "make -C FStar/examples/low-level krml-test.exe" "krml-test"; then
    failed="$failed krml-test\n"
  fi

  echo
  blue "Rebuilding miTLS"
  if ! possibly_log "make -C mitls-fstar/src/tls mitls.exe" "mitls-exe"; then
    failed="$failed miTLS\n"
  fi

  if [[ $failed != "" ]]; then
    red "ERROR: build failed for one or more projects"
    echo -e $failed
    exit 255
  else
    green "SUCCESS"
  fi
}

do_test () {
  FStar/examples/low-level/krml-test.exe
  (cd mitls-fstar/src/tls && ./test.out)
  mitls-fstar/src/tls/mitls.exe tls13.crypto.mozilla.org 443
}

do_clean ()
{
  for d in FStar/{u,}lib/ml FStar/src{,/ocaml-output} \
    FStar/ucontrib/CoreCrypto/ml/{,openssl} \
    FStar/examples/low-level/{,spartan_aes,LowCProvider} mitls-fstar/src/{,tls}; do
    make -C "$d" clean
  done
  # TODO remove once Spartan is easily clonable
  if [ -d Spartan ]; then
    (cd Spartan/tools/Spartan && nmake clean)
  fi
}

do_snapshot ()
{
  blue "Recording a new snapshot"
  echo "declare -A hashes" > new-hashes.sh
  echo "declare -A branches" >> new-hashes.sh
  for r in ${!repositories[@]}; do
    cd $r
    head=$(git rev-parse HEAD)
    branch=$(git symbolic-ref HEAD)
    branch=${branch##refs/heads/}
    upstream=$(git rev-parse --abbrev-ref --symbolic-full-name @{u})
    if [[ $upstream != "origin/$branch" ]]; then
      red "ERROR: in repository $r, HEAD ($head) is on $branch which pushes to \
        $upstream, not origin/$branch!"
    fi
    if ! git branch -r --contains $head | egrep "origin/$branch$" >/dev/null 2>&1; then
      red "ERROR: in repository $r, HEAD ($head) is on $branch which has not
        been pushed to $upstream"
    fi
    cd ..
    echo "recording $r at revision $(echo $head | cut -c 1-8) ($branch)"
    echo "hashes[$r]=$head" >> new-hashes.sh
    echo "branches[$r]=$branch" >> new-hashes.sh
  done
  mv new-hashes.sh hashes.sh
  cat <<MSG

New hashes have been recorded in hashes.sh. You can see the changes with git
diff.

If you intend to make this set of working revisions widely available, then you
must run commit and push.
MSG
}

# ------------------------------------------------------------------------------
# Usage and parsing arguments
# ------------------------------------------------------------------------------

print_usage ()
{
  cat <<HELP
OVERVIEW: $0, a high-level management script for Project Everest

USAGE: $0 [--yes] [--verbose] COMMANDS

COMMAND:
  check     ensure that all the required programs are found in path, install
            them if needed; offer to customize ~/.bashrc with proper env
            variables

  pull      self-update the everest repository (i.e. the script and
            hashes.sh) then run reset

  reset     pull all projects and move them to the revisions specified by
            hashes.sh

  snapshot  make the current state a new known set of working revisions; this
            writes into hashes.sh

  make      rebuild all projects

  test      launch the test artifacts

  clean     clean all projets

  help      print the current message
HELP
}

if [[ $1 == "" ]]; then
  print_usage
  exit 0
fi

while true; do
  case "$1" in
    --yes)
      make_non_interactive
      ;;

    --verbose)
      make_verbose
      ;;

    check)
      do_check
      ;;

    pull)
      do_pull
      ;;

    reset)
      do_reset
      ;;

    make)
      do_make
      ;;

    clean)
      do_clean
      ;;

    test)
      do_test
      ;;

    snapshot)
      do_snapshot
      ;;

    "")
      break
      ;;

    *)
      print_usage
      ;;
  esac
  shift
done
